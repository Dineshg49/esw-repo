{"ast":null,"code":"import validator from 'validator';\n/*\n * This class contains methods for validating fields using 'validator.js' library methods\n * The methods return error message if validation failed and false otherwise\n * You can use all supported validators and sanitizers of 'validator.js' libaray\n * See their docs here https://github.com/validatorjs/validator.js\n */\n\nclass ValidateFields {\n  /*\n   * A method that takes in the email\n   * Validates it\n   * Returns the response either error or false if there is no error\n   */\n  validateEmail(email) {\n    if (validator.isEmpty(email)) {\n      return 'Email is required';\n    } else if (!validator.isEmail(email)) {\n      return 'Invalid Email';\n    }\n\n    return false;\n  }\n\n  validateUsername(username) {\n    if (validator.isEmpty(username)) {\n      return 'This field is required';\n    }\n\n    return false;\n  }\n\n  validateNumber(para) {\n    if (typeof para !== 'string') para = para.toString();\n    let isnum = /^\\d+$/.test(para);\n\n    if (!isnum) {\n      return 'Value must be an integer';\n    } else if (para < \"0\") {\n      return 'Value must be positive';\n    }\n\n    return false;\n  }\n\n  validatePassword(password) {\n    if (validator.isEmpty(password)) {\n      return 'Password is required';\n    } else if (!validator.isLength(password, {\n      min: 6\n    })) {\n      return 'Password should be minimum 6 characters';\n    }\n\n    return false;\n  }\n\n  validateBigDate(para) {\n    if (!/^(19|20)\\d\\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])[-]([01][0-9]|2[0-4])[-]([0-5][0-9])$/.test(para)) {\n      return 'Enter Valid Date';\n    }\n\n    return false;\n  }\n\n}\n\nconst validateFields = new ValidateFields(); // export the class instance, so we can import and use it anywhere\n\nexport { validateFields };","map":{"version":3,"sources":["/home/kevin/Downloads/ESW/water-level-monitor/frontend/src/components/Common/Validation.js"],"names":["validator","ValidateFields","validateEmail","email","isEmpty","isEmail","validateUsername","username","validateNumber","para","toString","isnum","test","validatePassword","password","isLength","min","validateBigDate","validateFields"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA;;;;;;;AAOA,MAAMC,cAAN,CAAqB;AACnB;;;;;AAKAC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,QAAIH,SAAS,CAACI,OAAV,CAAkBD,KAAlB,CAAJ,EAA8B;AAC5B,aAAO,mBAAP;AACD,KAFD,MAEO,IAAI,CAACH,SAAS,CAACK,OAAV,CAAkBF,KAAlB,CAAL,EAA+B;AACpC,aAAO,eAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDG,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACzB,QAAIP,SAAS,CAACI,OAAV,CAAkBG,QAAlB,CAAJ,EAAiC;AAC/B,aAAO,wBAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,QAAG,OAAOA,IAAP,KAAgB,QAAnB,EACEA,IAAI,GAACA,IAAI,CAACC,QAAL,EAAL;AACF,QAAIC,KAAK,GAAG,QAAQC,IAAR,CAAaH,IAAb,CAAZ;;AACA,QAAG,CAACE,KAAJ,EAAU;AACR,aAAO,0BAAP;AACD,KAFD,MAGK,IAAGF,IAAI,GAAC,GAAR,EAAY;AACf,aAAO,wBAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDI,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACzB,QAAId,SAAS,CAACI,OAAV,CAAkBU,QAAlB,CAAJ,EAAiC;AAC/B,aAAO,sBAAP;AACD,KAFD,MAEO,IAAI,CAACd,SAAS,CAACe,QAAV,CAAmBD,QAAnB,EAA6B;AAAEE,MAAAA,GAAG,EAAE;AAAP,KAA7B,CAAL,EAA+C;AACpD,aAAO,yCAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDC,EAAAA,eAAe,CAACR,IAAD,EAAO;AACpB,QAAI,CAAC,iGAAiGG,IAAjG,CAAsGH,IAAtG,CAAL,EAAkH;AAChH,aAAO,kBAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAjDkB;;AAqDrB,MAAMS,cAAc,GAAG,IAAIjB,cAAJ,EAAvB,C,CAEA;;AACA,SAASiB,cAAT","sourcesContent":["import validator from 'validator';\n\n/*\n * This class contains methods for validating fields using 'validator.js' library methods\n * The methods return error message if validation failed and false otherwise\n * You can use all supported validators and sanitizers of 'validator.js' libaray\n * See their docs here https://github.com/validatorjs/validator.js\n */\n\nclass ValidateFields {\n  /*\n   * A method that takes in the email\n   * Validates it\n   * Returns the response either error or false if there is no error\n   */\n  validateEmail(email) {\n    if (validator.isEmpty(email)) {\n      return 'Email is required';\n    } else if (!validator.isEmail(email)) {\n      return 'Invalid Email';\n    }\n    return false;\n  }\n\n  validateUsername(username) {\n    if (validator.isEmpty(username)) {\n      return 'This field is required';\n    } \n    return false;\n  }\n\n  validateNumber(para) {\n    if(typeof para !== 'string')\n      para=para.toString();\n    let isnum = /^\\d+$/.test(para);\n    if(!isnum){\n      return 'Value must be an integer';\n    }\n    else if(para<\"0\"){\n      return 'Value must be positive'\n    }\n    return false;\n  }\n\n  validatePassword(password) {\n    if (validator.isEmpty(password)) {\n      return 'Password is required';\n    } else if (!validator.isLength(password, { min: 6 })) {\n      return 'Password should be minimum 6 characters';\n    }\n    return false;\n  }\n\n  validateBigDate(para) {\n    if (!/^(19|20)\\d\\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])[-]([01][0-9]|2[0-4])[-]([0-5][0-9])$/.test(para)) {\n      return 'Enter Valid Date';\n    }\n    return false;\n  }\n  \n}\n\nconst validateFields = new ValidateFields();\n\n// export the class instance, so we can import and use it anywhere\nexport { validateFields };"]},"metadata":{},"sourceType":"module"}