{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Downloads/DASS/2019101092/2019101092_assign1/frontend/src/components/Common/Login.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactDOM from 'react-dom';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // import UserProfile from './test';\n\nconst initialState = {\n  email: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  password: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  type: 'user',\n  submitCalled: false,\n  allFieldsValidated: false\n};\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.onChangeType = this.onChangeType.bind(this);\n  }\n\n  handleBlur(validationFunc, evt) {\n    const field = evt.target.name; // validate onBlur only when validateOnChange for that field is false\n    // because if validateOnChange is already true there is no need to validate onBlur\n\n    if (this.state[field]['validateOnChange'] === false && this.state.submitCalled === false) {\n      this.setState(state => ({\n        [field]: { ...state[field],\n          validateOnChange: true,\n          error: validationFunc(state[field].value)\n        }\n      }));\n    }\n\n    return;\n  }\n\n  handleChange(validationFunc, evt) {\n    const field = evt.target.name;\n    const fieldVal = evt.target.value;\n    this.setState(state => ({\n      [field]: { ...state[field],\n        value: fieldVal,\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n      }\n    }));\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault(); // validate all fields\n\n    console.log(this.state);\n    const {\n      email,\n      password,\n      type\n    } = this.state;\n    const emailError = validateFields.validateEmail(email.value);\n    const passwordError = validateFields.validatePassword(password.value);\n\n    if ([emailError, passwordError].every(e => e === false)) {\n      // no errors submit the form\n      // console.log('success');\n      const newUser = {\n        email: email.value,\n        password: password.value\n      };\n      console.log(type); // console.log(email.value)\n\n      if (type == \"user\") {\n        console.log(\"ok user\");\n        axios.post('http://localhost:4000/user/login', newUser).then(res => {\n          if (res.data === 'Success') {\n            // ReactDOM.render(<UserApp/>,document.getElementById(\"root\"));\n            // UserProfile.setName(email.value);\n            const newSession = {\n              email: email.value\n            };\n            axios.post('http://localhost:4000/user/session', newSession).then(res => {\n              console.log(res.data);\n            });\n            window.open(\"/users/userprofile\", \"_self\"); // const newLink = {\n            //   pathname: \"/users/userprofile\",\n            //   name: email.value\n            // };\n            // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n          } else alert(res.data);\n\n          console.log(res.data);\n        });\n      } else {\n        console.log(\"ok recruiter\");\n        axios.post('http://localhost:4000/recruiter/login', newUser).then(res => {\n          if (res.data === 'Success') {\n            const newSession = {\n              email: email.value\n            };\n            axios.post('http://localhost:4000/recruiter/session', newSession).then(res => {\n              console.log(res.data);\n            });\n            window.open(\"/recruiters/recruiterprofile\", \"_self\"); // const newLink = {\n            //   pathname: \"/users/userprofile\",\n            //   name: email.value\n            // };\n            // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n          } else alert(res.data);\n\n          console.log(res.data);\n        });\n      }\n\n      this.setState({\n        email: '',\n        password: ''\n      }); // clear state and show all fields are validated\n\n      this.setState({ ...initialState,\n        allFieldsValidated: true\n      });\n      this.showAllFieldsValidated();\n    } else {\n      // update the state with errors\n      this.setState(state => ({\n        email: { ...state.email,\n          validateOnChange: true,\n          error: emailError\n        },\n        password: { ...state.password,\n          validateOnChange: true,\n          error: passwordError\n        }\n      }));\n    }\n  }\n\n  showAllFieldsValidated() {\n    setTimeout(() => {\n      this.setState({\n        allFieldsValidated: false\n      });\n    }, 1500);\n  } // onChangeEmail(event) {\n  //     this.setState({ email: event.target.value });\n  // }\n  // onChangePassword(event) {\n  //     this.setState({ password: event.target.value });\n  // }\n\n\n  onChangeType(event) {\n    this.setState({\n      type: event.target.value\n    });\n  } // onSubmit(e) {\n  //     e.preventDefault();\n  //     const newUser = {\n  //         email: this.state.email,\n  //         password: this.state.password,\n  //     }\n  //     //console.log(this.state.type)\n  //     if(this.state.type=='user'){\n  //         axios.post('http://localhost:4000/user/login', newUser)\n  //             .then(res => {alert( res.data);console.log(res.data)})\n  //             ;}\n  //     else{\n  //         axios.post('http://localhost:4000/recruiter/login', newUser)\n  //             .then(res => {alert( res.data);console.log(res.data)})\n  //             ;}\n  //     this.setState({\n  //         email: '',\n  //         password:'',\n  //     });\n\n\n  render() {\n    const {\n      email,\n      password,\n      allFieldsValidated\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: evt => this.handleSubmit(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Role:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"user\",\n      checked: this.state.type === \"user\",\n      onChange: this.onChangeType,\n      name: \"gender\",\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), \" Applicant \\xA0\\xA0\\xA0\\xA0\", React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"recruiter\",\n      checked: this.state.type === \"recruiter\",\n      onChange: this.onChangeType,\n      name: \"gender\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), \" Recruiter\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Email: \"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      value: email.value,\n      placeholder: \"Enter your email\",\n      className: classnames('form-control', {\n        'is-valid': email.error === false\n      }, {\n        'is-invalid': email.error\n      }),\n      onChange: evt => this.handleChange(validateFields.validateEmail, evt),\n      onBlur: evt => this.handleBlur(validateFields.validateEmail, evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, email.error)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Password: \"), React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: password.value,\n      placeholder: \"Enter your password\",\n      className: classnames('form-control', {\n        'is-valid': password.error === false\n      }, {\n        'is-invalid': password.error\n      }),\n      onChange: evt => this.handleChange(validateFields.validatePassword, evt),\n      onBlur: evt => this.handleBlur(validateFields.validatePassword, evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, password.error)), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-secondary btn-block\",\n      onMouseDown: () => this.setState({\n        submitCalled: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}","map":{"version":3,"sources":["/home/kevin/Downloads/DASS/2019101092/2019101092_assign1/frontend/src/components/Common/Login.js"],"names":["React","Component","axios","ReactDOM","validateFields","classnames","BrowserRouter","Router","Route","Link","initialState","email","value","validateOnChange","error","password","type","submitCalled","allFieldsValidated","Login","constructor","props","state","onChangeType","bind","handleBlur","validationFunc","evt","field","target","name","setState","handleChange","fieldVal","handleSubmit","preventDefault","console","log","emailError","validateEmail","passwordError","validatePassword","every","e","newUser","post","then","res","data","newSession","window","open","alert","showAllFieldsValidated","setTimeout","event","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport ReactDOM from 'react-dom';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n// import UserProfile from './test';\n\n\nconst initialState = {\n    email: {\n      value: '',\n      validateOnChange: false,\n      error: ''\n    },\n    password: {\n      value: '',\n      validateOnChange: false,\n      error: ''\n    },\n    type: 'user',\n    submitCalled: false,\n    allFieldsValidated: false\n  };\n\nexport default class Login extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = initialState;\n        this.onChangeType = this.onChangeType.bind(this);\n        }\n\n        handleBlur(validationFunc, evt) {\n            const field = evt.target.name;\n            // validate onBlur only when validateOnChange for that field is false\n            // because if validateOnChange is already true there is no need to validate onBlur\n            if (\n              this.state[field]['validateOnChange'] === false &&\n              this.state.submitCalled === false\n            ) {\n              this.setState(state => ({\n                [field]: {\n                  ...state[field],\n                  validateOnChange: true,\n                  error: validationFunc(state[field].value)\n                }\n              }));\n            }\n            return;\n          }\n\n        handleChange(validationFunc, evt) {\n        const field = evt.target.name;\n        const fieldVal = evt.target.value;\n        this.setState(state => ({\n            [field]: {\n            ...state[field],\n            value: fieldVal,\n            error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n            }\n        }));\n        }\n\n        handleSubmit(evt) {\n            evt.preventDefault();\n            // validate all fields\n            console.log(this.state)\n            const { email, password,type} = this.state;\n            const emailError = validateFields.validateEmail(email.value);\n            const passwordError = validateFields.validatePassword(password.value);\n            if ([emailError, passwordError].every(e => e === false)) {\n              // no errors submit the form\n             // console.log('success');\n              const newUser = {\n                email: email.value,\n                password: password.value,\n            }\n            console.log(type)\n            // console.log(email.value)\n            if(type==\"user\"){\n                console.log(\"ok user\");\n                axios.post('http://localhost:4000/user/login', newUser)\n                    .then(res => {\n                      if(res.data==='Success')\n                      {\n                        // ReactDOM.render(<UserApp/>,document.getElementById(\"root\"));\n                        // UserProfile.setName(email.value);\n                        const newSession = {\n                          email: email.value\n                        }\n                        axios.post('http://localhost:4000/user/session', newSession)\n                          .then(res => {console.log(res.data)})\n                          ;\n\n                        window.open(\"/users/userprofile\",\"_self\");\n                        // const newLink = {\n                        //   pathname: \"/users/userprofile\",\n                        //   name: email.value\n                        // };\n                        \n                        // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n                        \n                      }\n                      else\n                        alert( res.data);console.log(res.data);\n                    })\n                    ;}\n            \n            else{\n                console.log(\"ok recruiter\");\n                axios.post('http://localhost:4000/recruiter/login', newUser)\n                    .then(res => {\n                      if(res.data==='Success')\n                      {\n                        const newSession = {\n                          email: email.value\n                        }\n                        axios.post('http://localhost:4000/recruiter/session', newSession)\n                          .then(res => {console.log(res.data)})\n                          ;\n\n                        window.open(\"/recruiters/recruiterprofile\",\"_self\");\n                        // const newLink = {\n                        //   pathname: \"/users/userprofile\",\n                        //   name: email.value\n                        // };\n                        \n                        // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n                        \n                      }\n                      else\n                        alert( res.data);console.log(res.data);\n                    })\n                    ;}\n    \n            this.setState({\n                email: '',\n                password:'',\n            });\n              // clear state and show all fields are validated\n              this.setState({ ...initialState, allFieldsValidated: true });\n              \n              this.showAllFieldsValidated();\n            } else {\n              // update the state with errors\n              this.setState(state => ({\n                email: {\n                  ...state.email,\n                  validateOnChange: true,\n                  error: emailError\n                },\n                password: {\n                  ...state.password,\n                  validateOnChange: true,\n                  error: passwordError\n                }\n              }));\n            }\n          }\n        \n          showAllFieldsValidated() {\n            setTimeout(() => {\n              this.setState({ allFieldsValidated: false });\n            }, 1500);\n          }\n        \n    \n    // onChangeEmail(event) {\n    //     this.setState({ email: event.target.value });\n    // }\n    // onChangePassword(event) {\n    //     this.setState({ password: event.target.value });\n    // }\n    onChangeType(event) {\n        this.setState({ type: event.target.value });\n    }\n\n    // onSubmit(e) {\n    //     e.preventDefault();\n\n    //     const newUser = {\n    //         email: this.state.email,\n    //         password: this.state.password,\n    //     }\n    //     //console.log(this.state.type)\n    //     if(this.state.type=='user'){\n    //         axios.post('http://localhost:4000/user/login', newUser)\n    //             .then(res => {alert( res.data);console.log(res.data)})\n    //             ;}\n        \n    //     else{\n    //         axios.post('http://localhost:4000/recruiter/login', newUser)\n    //             .then(res => {alert( res.data);console.log(res.data)})\n    //             ;}\n\n    //     this.setState({\n    //         email: '',\n    //         password:'',\n    //     });\n    \n\n    render() {\n        const { email, password, allFieldsValidated } = this.state;\n        return (\n            \n            <div>\n                \n                <form onSubmit={evt => this.handleSubmit(evt)}>\n                    Role:<br/>\n                    <div >\n                        <input type=\"radio\" value=\"user\" checked={this.state.type === \"user\"} onChange={this.onChangeType} name=\"gender\" defaultChecked/> Applicant &nbsp;&nbsp;&nbsp;&nbsp;\n                        <input type=\"radio\" value=\"recruiter\" checked={this.state.type === \"recruiter\"} onChange={this.onChangeType}  name=\"gender\" /> Recruiter\n                    </div>\n                    <br/>\n\n                    <div className=\"form-group\">\n                        <label>Email: </label>\n                        <input \n                                type=\"text\" \n                                name=\"email\"\n                               value={email.value}\n                               placeholder=\"Enter your email\"\n                               className={classnames(\n                                'form-control',\n                                { 'is-valid': email.error === false },\n                                { 'is-invalid': email.error }\n                              )}\n                              onChange={evt =>\n                                this.handleChange(validateFields.validateEmail, evt)\n                              }\n                              onBlur={evt =>\n                                this.handleBlur(validateFields.validateEmail, evt)\n                              }\n                            />\n                            <div className=\"invalid-feedback\">{email.error}</div>\n             \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Password: </label>\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            value={password.value}\n                            placeholder=\"Enter your password\"\n                            className={classnames(\n                                'form-control',\n                                { 'is-valid': password.error === false },\n                                { 'is-invalid': password.error }\n                            )}\n                            onChange={evt =>\n                                this.handleChange(validateFields.validatePassword, evt)\n                            }\n                            onBlur={evt =>\n                                this.handleBlur(validateFields.validatePassword, evt)\n                            }\n                        />\n                     <div className=\"invalid-feedback\">{password.error}</div>\n                    </div>\n\n                    <button\n                type=\"submit\"\n                className=\"btn btn-secondary btn-block\"\n                onMouseDown={() => this.setState({ submitCalled: true })}\n              >\n                Submit\n              </button>\n                </form>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}