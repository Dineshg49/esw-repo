{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Downloads/IIIT-H CSE/2-2/DASS/Assignment -1/2019101092_assign1/frontend/src/components/Common/Register.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\nconst initialState = {\n  username: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  email: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  password: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  type: 'user',\n  submitCalled: false,\n  allFieldsValidated: false\n};\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.onChangeType = this.onChangeType.bind(this);\n  }\n\n  handleBlur(validationFunc, evt) {\n    const field = evt.target.name; // validate onBlur only when validateOnChange for that field is false\n    // because if validateOnChange is already true there is no need to validate onBlur\n\n    if (this.state[field]['validateOnChange'] === false && this.state.submitCalled === false) {\n      this.setState(state => ({\n        [field]: { ...state[field],\n          validateOnChange: true,\n          error: validationFunc(state[field].value)\n        }\n      }));\n    }\n\n    return;\n  }\n\n  handleChange(validationFunc, evt) {\n    const field = evt.target.name;\n    const fieldVal = evt.target.value;\n    this.setState(state => ({\n      [field]: { ...state[field],\n        value: fieldVal,\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n      }\n    }));\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault(); // validate all fields\n    //console.log(this.state)\n\n    const {\n      email,\n      password,\n      type,\n      username\n    } = this.state; // console.log(this.state);\n\n    const emailError = validateFields.validateEmail(email.value);\n    const passwordError = validateFields.validatePassword(password.value);\n    const usernameError = validateFields.validateUsername(username.value);\n\n    if ([emailError, passwordError, usernameError].every(e => e === false)) {\n      // no errors submit the form\n      //   console.log('success');\n      const newUser = {\n        email: email.value,\n        password: password.value,\n        name: username.value,\n        date: Date.now()\n      }; // console.log(type)\n      // console.log(newUser);   \n      // console.log(email.value)\n\n      if (type == \"user\") {\n        // console.log(\"ok user\");\n        axios.post('http://localhost:4000/user/register', newUser).then(res => {\n          if (res.data != 'Error: Account With Given Email Exists') {\n            // ReactDOM.render(<UserApp/>,document.getElementById(\"root\"));\n            // UserProfile.setName(email.value);\n            console.log(res.data);\n            const newSession = {\n              email: email.value\n            };\n            axios.post('http://localhost:4000/user/session', newSession).then(res => {\n              console.log(res.data);\n            });\n            window.open(\"/users/userprofile\", \"_self\"); // const newLink = {\n            //   pathname: \"/users/userprofile\",\n            //   name: email.value\n            // };\n            // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n          } else {\n            alert(res.data);\n            console.log(res.data);\n          }\n        });\n      } else {\n        // console.log(\"ok recruiter\");\n        axios.post('http://localhost:4000/recruiter/register', newUser).then(res => {\n          if (res.data != 'Error: Account With Given Email Exists') {\n            // ReactDOM.render(<UserApp/>,document.getElementById(\"root\"));\n            // UserProfile.setName(email.value);\n            const newSession = {\n              email: email.value\n            };\n            axios.post('http://localhost:4000/recruiter/session', newSession).then(res => {\n              console.log(res.data);\n            });\n            window.open(\"/recruiters/recruiterprofile\", \"_self\"); // const newLink = {\n            //   pathname: \"/users/userprofile\",\n            //   name: email.value\n            // };\n            // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n          } else {\n            alert(res.data);\n            console.log(res.data);\n          }\n        });\n      }\n\n      this.setState({\n        email: '',\n        password: '',\n        username: ''\n      }); // clear state and show all fields are validated\n\n      this.setState({ ...initialState,\n        allFieldsValidated: true\n      });\n      this.showAllFieldsValidated();\n    } else {\n      // update the state with errors\n      this.setState(state => ({\n        email: { ...state.email,\n          validateOnChange: true,\n          error: emailError\n        },\n        password: { ...state.password,\n          validateOnChange: true,\n          error: passwordError\n        },\n        username: { ...state.username,\n          validateOnChange: true,\n          error: usernameError\n        }\n      }));\n    }\n  }\n\n  showAllFieldsValidated() {\n    setTimeout(() => {\n      this.setState({\n        allFieldsValidated: false\n      });\n    }, 1500);\n  } // onChangeEmail(event) {\n  //     this.setState({ email: event.target.value });\n  // }\n  // onChangePassword(event) {\n  //     this.setState({ password: event.target.value });\n  // }\n\n\n  onChangeType(event) {\n    this.setState({\n      type: event.target.value\n    });\n  } // onSubmit(e) {\n  //     e.preventDefault();\n  //     const newUser = {\n  //         email: this.state.email,\n  //         password: this.state.password,\n  //     }\n  //     //console.log(this.state.type)\n  //     if(this.state.type=='user'){\n  //         axios.post('http://localhost:4000/user/login', newUser)\n  //             .then(res => {alert( res.data);console.log(res.data)})\n  //             ;}\n  //     else{\n  //         axios.post('http://localhost:4000/recruiter/login', newUser)\n  //             .then(res => {alert( res.data);console.log(res.data)})\n  //             ;}\n  //     this.setState({\n  //         email: '',\n  //         password:'',\n  //     });\n\n\n  render() {\n    const {\n      email,\n      password,\n      username,\n      allFieldsValidated\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: evt => this.handleSubmit(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Role:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"user\",\n      checked: this.state.type === \"user\",\n      onChange: this.onChangeType,\n      name: \"gender\",\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), \" Applicant \\xA0\\xA0\\xA0\\xA0\", React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"recruiter\",\n      checked: this.state.type === \"recruiter\",\n      onChange: this.onChangeType,\n      name: \"gender\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), \" Recruiter\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Username: \"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      value: username.value,\n      placeholder: \"Enter your username\",\n      className: classnames('form-control', {\n        'is-valid': username.error === false\n      }, {\n        'is-invalid': username.error\n      }),\n      onChange: evt => this.handleChange(validateFields.validateUsername, evt),\n      onBlur: evt => this.handleBlur(validateFields.validateUsername, evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, username.error)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Email: \"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      value: email.value,\n      placeholder: \"Enter your email\",\n      className: classnames('form-control', {\n        'is-valid': email.error === false\n      }, {\n        'is-invalid': email.error\n      }),\n      onChange: evt => this.handleChange(validateFields.validateEmail, evt),\n      onBlur: evt => this.handleBlur(validateFields.validateEmail, evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, email.error)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Password: \"), React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: password.value,\n      placeholder: \"Enter your password\",\n      className: classnames('form-control', {\n        'is-valid': password.error === false\n      }, {\n        'is-invalid': password.error\n      }),\n      onChange: evt => this.handleChange(validateFields.validatePassword, evt),\n      onBlur: evt => this.handleBlur(validateFields.validatePassword, evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, password.error)), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-secondary btn-block\",\n      onMouseDown: () => this.setState({\n        submitCalled: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}","map":{"version":3,"sources":["/home/kevin/Downloads/IIIT-H CSE/2-2/DASS/Assignment -1/2019101092_assign1/frontend/src/components/Common/Register.js"],"names":["React","Component","axios","validateFields","classnames","initialState","username","value","validateOnChange","error","email","password","type","submitCalled","allFieldsValidated","Register","constructor","props","state","onChangeType","bind","handleBlur","validationFunc","evt","field","target","name","setState","handleChange","fieldVal","handleSubmit","preventDefault","emailError","validateEmail","passwordError","validatePassword","usernameError","validateUsername","every","e","newUser","date","Date","now","post","then","res","data","console","log","newSession","window","open","alert","showAllFieldsValidated","setTimeout","event","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\n\nconst initialState = {\n    username: {\n        value: '',\n        validateOnChange: false,\n        error: ''\n      },\n    email: {\n      value: '',\n      validateOnChange: false,\n      error: ''\n    },\n    password: {\n      value: '',\n      validateOnChange: false,\n      error: ''\n    },\n    type: 'user',\n    submitCalled: false,\n    allFieldsValidated: false\n  };\n\nexport default class Register extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = initialState;\n        this.onChangeType = this.onChangeType.bind(this);\n        }\n\n        handleBlur(validationFunc, evt) {\n            const field = evt.target.name;\n            // validate onBlur only when validateOnChange for that field is false\n            // because if validateOnChange is already true there is no need to validate onBlur\n            if (\n              this.state[field]['validateOnChange'] === false &&\n              this.state.submitCalled === false\n            ) {\n              this.setState(state => ({\n                [field]: {\n                  ...state[field],\n                  validateOnChange: true,\n                  error: validationFunc(state[field].value)\n                }\n              }));\n            }\n            return;\n          }\n\n        handleChange(validationFunc, evt) {\n        const field = evt.target.name;\n        const fieldVal = evt.target.value;\n        this.setState(state => ({\n            [field]: {\n            ...state[field],\n            value: fieldVal,\n            error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n            }\n        }));\n        }\n\n        handleSubmit(evt) {\n            evt.preventDefault();\n            // validate all fields\n            //console.log(this.state)\n            const { email, password,type,username} = this.state;\n            // console.log(this.state);\n            const emailError = validateFields.validateEmail(email.value);\n            const passwordError = validateFields.validatePassword(password.value);\n            const usernameError = validateFields.validateUsername(username.value);\n            if ([emailError, passwordError,usernameError].every(e => e === false)) {\n              // no errors submit the form\n            //   console.log('success');\n              const newUser = {\n                email: email.value,\n                password: password.value,\n                name: username.value,\n                date: Date.now()\n            }\n            // console.log(type)\n            // console.log(newUser);   \n            // console.log(email.value)\n            if(type==\"user\"){\n                // console.log(\"ok user\");\n                axios.post('http://localhost:4000/user/register', newUser)\n                    .then(res => {\n                      if(res.data != 'Error: Account With Given Email Exists')\n                      {\n                        // ReactDOM.render(<UserApp/>,document.getElementById(\"root\"));\n                        // UserProfile.setName(email.value);\n                        console.log(res.data);\n                        const newSession = {\n                          email: email.value\n                        }\n                        axios.post('http://localhost:4000/user/session', newSession)\n                          .then(res => {console.log(res.data)})\n                          ;\n\n                        window.open(\"/users/userprofile\",\"_self\");\n                        // const newLink = {\n                        //   pathname: \"/users/userprofile\",\n                        //   name: email.value\n                        // };\n                        \n                        // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n                        \n                      }\n                      else\n                      {\n                        alert( res.data);\n                        console.log(res.data);\n                      }\n                    })\n                    ;}\n            \n            else{\n                // console.log(\"ok recruiter\");\n                axios.post('http://localhost:4000/recruiter/register', newUser)\n                    .then(res => {\n                      if(res.data != 'Error: Account With Given Email Exists')\n                      {\n                        // ReactDOM.render(<UserApp/>,document.getElementById(\"root\"));\n                        // UserProfile.setName(email.value);\n                        const newSession = {\n                          email: email.value\n                        }\n                        axios.post('http://localhost:4000/recruiter/session', newSession)\n                          .then(res => {console.log(res.data)})\n                          ;\n\n                        window.open(\"/recruiters/recruiterprofile\",\"_self\");\n                        // const newLink = {\n                        //   pathname: \"/users/userprofile\",\n                        //   name: email.value\n                        // };\n                        \n                        // ReactDOM.render(<Link to={newLink}> hi </Link>, document.getElementById(\"root\"));\n                        \n                      }\n                      else\n                      {\n                        alert( res.data);\n                        console.log(res.data);\n                      }\n                    })\n                    ;}\n    \n            this.setState({\n                email: '',\n                password:'',\n                username:'',\n            });\n              // clear state and show all fields are validated\n              this.setState({ ...initialState, allFieldsValidated: true });\n              \n              this.showAllFieldsValidated();\n            } else {\n              // update the state with errors\n              this.setState(state => ({\n                email: {\n                  ...state.email,\n                  validateOnChange: true,\n                  error: emailError\n                },\n                password: {\n                  ...state.password,\n                  validateOnChange: true,\n                  error: passwordError\n                },\n                username: {\n                    ...state.username,\n                    validateOnChange: true,\n                    error: usernameError\n                  }\n              }));\n            }\n          }\n        \n          showAllFieldsValidated() {\n            setTimeout(() => {\n              this.setState({ allFieldsValidated: false });\n            }, 1500);\n          }\n        \n    \n    // onChangeEmail(event) {\n    //     this.setState({ email: event.target.value });\n    // }\n    // onChangePassword(event) {\n    //     this.setState({ password: event.target.value });\n    // }\n    onChangeType(event) {\n        this.setState({ type: event.target.value });\n    }\n\n    // onSubmit(e) {\n    //     e.preventDefault();\n\n    //     const newUser = {\n    //         email: this.state.email,\n    //         password: this.state.password,\n    //     }\n    //     //console.log(this.state.type)\n    //     if(this.state.type=='user'){\n    //         axios.post('http://localhost:4000/user/login', newUser)\n    //             .then(res => {alert( res.data);console.log(res.data)})\n    //             ;}\n        \n    //     else{\n    //         axios.post('http://localhost:4000/recruiter/login', newUser)\n    //             .then(res => {alert( res.data);console.log(res.data)})\n    //             ;}\n\n    //     this.setState({\n    //         email: '',\n    //         password:'',\n    //     });\n    \n\n    render() {\n        const { email, password, username, allFieldsValidated } = this.state;\n        return (\n            \n            <div>\n                \n                <form onSubmit={evt => this.handleSubmit(evt)}>\n                    Role:<br/>\n                    <div >\n                        <input type=\"radio\" value=\"user\" checked={this.state.type === \"user\"} onChange={this.onChangeType} name=\"gender\" defaultChecked/> Applicant &nbsp;&nbsp;&nbsp;&nbsp;\n                        <input type=\"radio\" value=\"recruiter\" checked={this.state.type === \"recruiter\"} onChange={this.onChangeType}  name=\"gender\" /> Recruiter\n                    </div>\n                    <br/>\n\n                    <div className=\"form-group\">\n                        <label>Username: </label>\n                        <input \n                                type=\"text\" \n                                name=\"username\"\n                               value={username.value}\n                               placeholder=\"Enter your username\"\n                               className={classnames(\n                                'form-control',\n                                { 'is-valid': username.error === false },\n                                { 'is-invalid': username.error }\n                              )}\n                              onChange={evt =>\n                                this.handleChange(validateFields.validateUsername, evt)\n                              }\n                              onBlur={evt =>\n                                this.handleBlur(validateFields.validateUsername, evt)\n                              }\n                            />\n                            <div className=\"invalid-feedback\">{username.error}</div>\n             \n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Email: </label>\n                        <input \n                                type=\"text\" \n                                name=\"email\"\n                               value={email.value}\n                               placeholder=\"Enter your email\"\n                               className={classnames(\n                                'form-control',\n                                { 'is-valid': email.error === false },\n                                { 'is-invalid': email.error }\n                              )}\n                              onChange={evt =>\n                                this.handleChange(validateFields.validateEmail, evt)\n                              }\n                              onBlur={evt =>\n                                this.handleBlur(validateFields.validateEmail, evt)\n                              }\n                            />\n                            <div className=\"invalid-feedback\">{email.error}</div>\n             \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Password: </label>\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            value={password.value}\n                            placeholder=\"Enter your password\"\n                            className={classnames(\n                                'form-control',\n                                { 'is-valid': password.error === false },\n                                { 'is-invalid': password.error }\n                            )}\n                            onChange={evt =>\n                                this.handleChange(validateFields.validatePassword, evt)\n                            }\n                            onBlur={evt =>\n                                this.handleBlur(validateFields.validatePassword, evt)\n                            }\n                        />\n                     <div className=\"invalid-feedback\">{password.error}</div>\n                    </div>\n\n                    <button\n                type=\"submit\"\n                className=\"btn btn-secondary btn-block\"\n                onMouseDown={() => this.setState({ submitCalled: true })}\n              >\n                Submit\n              </button>\n                </form>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}