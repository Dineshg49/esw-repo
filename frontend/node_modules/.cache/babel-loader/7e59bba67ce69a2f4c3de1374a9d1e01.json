{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Downloads/DASS/2019101092/2019101092_assign1/frontend/src/components/Users/Items/JobElement.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport Card from 'react-bootstrap/Card';\nimport axios from 'axios';\nimport { validateFields } from '../../Common/Validation'; // import PopUpInput from './PopUpInput'\n\nimport SimplePortal from '../PopUpInput';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport alertify from 'alertifyjs';\nimport 'alertifyjs/build/css/alertify.css';\n\nfunction printSkills(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, props);\n}\n\nclass JobElement extends Component {\n  //console.log(props);\n  constructor(props) {\n    super(props);\n    this.state = {\n      showComponent: false\n    }; // console.log(\"in JobElement\");\n\n    this.skills_array = this.props.job.skills.map(skill => {\n      return printSkills(skill);\n    }); // console.log(props)\n\n    this.status = '';\n    this.onClickAccept = this.onClickAccept.bind(this);\n    this.SOP = 'Enter Your SOP';\n    this.rating = '';\n  } // function \n\n\n  onClickAccept() {\n    // this.setState({\n    //     showComponent: true\n    // });\n    var obj = this.props;\n    alertify.prompt('Enter SOP (less than 250 words )', this.SOP, function (evt, value) {\n      this.SOP = value;\n      var str1 = value;\n      console.log(obj);\n      str1 = str1.replace(/(^\\s*)|(\\s*$)/gi, \"\");\n      str1 = str1.replace(/[ ]{2,}/gi, \" \");\n      str1 = str1.replace(/\\n /, \"\\n\");\n      var count = str1.split(' ').length;\n      if (count > 250) alertify.message('You have exceeded the word limit, please try applying again');else {\n        console.log(this.SOP);\n        const Sending = {\n          id: obj.job._id,\n          email: obj.email,\n          sop: this.SOP\n        };\n        axios.post(\"http://localhost:4000/job/applyjob\", Sending).then(res => {\n          alert(res.data);\n          window.location.reload();\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }).setting({\n      'labels': {\n        ok: 'Submit',\n        cancel: 'Cancel'\n      }\n    });\n  }\n\n  ApplyOptionRejection() {\n    // console.log(props)\n    function sayHello() {\n      alert(\"Reached Max Limit of 10 open Applicatons\");\n    }\n\n    return React.createElement(Button, {\n      color: \"primary\",\n      onClick: sayHello,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Apply\");\n  }\n\n  ApplyOptionFull() {\n    // console.log(props)\n    function sayHello() {\n      alert(\"You have already been accepted into a job!!\");\n    }\n\n    return React.createElement(Button, {\n      color: \"primary\",\n      onClick: sayHello,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Apply\");\n  }\n\n  ApplyOptionAccept() {\n    // console.log(props)\n    // var ShowComponent = false\n    // function sayHello() {\n    //     console.log(\"hai\");\n    //     ShowComponent=true\n    // }\n    return React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.onClickAccept,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Apply\");\n  }\n\n  render() {\n    if (this.props.job.applicants.includes(this.props.email) || this.props.job.shortlisted.includes(this.props.email)) {\n      this.status = React.createElement(\"label\", {\n        style: {\n          color: 'green'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \" Applied\");\n    } else if (this.props.user.accepted === 1) {\n      this.status = this.ApplyOptionFull();\n    } else if (this.props.job.max_app === 0 || this.props.job.max_pos === 0) {\n      this.status = React.createElement(\"label\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"No Vacancies\");\n    } else if (this.props.user.no_of_apps === 10) {\n      this.status = this.ApplyOptionRejection();\n    } else {\n      this.status = this.ApplyOptionAccept();\n    }\n\n    if (this.props.job.rating === 0) {\n      this.rating = 0;\n    } else {\n      this.rating = this.props.job.rating / this.props.job.no_of_raters;\n    } // return(\n    //     <div>\n    //         <Card style={{ width: '18rem' }}>\n    //         <Card.Body>\n    //             <Card.Title>{this.props.job.title}</Card.Title>\n    //             <Card.Subtitle className=\"mb-2 text-muted\">Deadline: {this.props.job.deadline}</Card.Subtitle>\n    //             Skills Required: {this.skills_array}\n    //             <Card.Text>\n    //                 Posted by: {this.props.job.name}\n    //                 <br />\n    //                 Type: {this.props.job.job_type}\n    //                 <br />\n    //                 Salary: {this.props.job.salary}\n    //                 <br />\n    //                 Duration: {this.props.job.duration}\n    //                 <br />\n    //                 Rating: {this.props.job.rating}\n    //                 <br />\n    //             </Card.Text> \n    //                 {this.status} \n    //                 {/* <Card.Link onClick={()=>(console.log(\"hi there\"))}>say hi</Card.Link>\n    //             <Card.Link href=\"#\">Another Link</Card.Link>  */}\n    //             </Card.Body> \n    //             </Card> \n    //     </div>\n    // )\n\n\n    return React.createElement(TableRow, {\n      key: this.props.job._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.props.job.title), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, this.props.job.deadline), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.skills_array), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, this.props.job.name), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.props.job.job_type), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.props.job.salary), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.props.job.duration), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.rating), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.status));\n  }\n\n}\n\nexport default JobElement;","map":{"version":3,"sources":["/home/kevin/Downloads/DASS/2019101092/2019101092_assign1/frontend/src/components/Users/Items/JobElement.js"],"names":["React","Component","ReactDOM","Card","axios","validateFields","SimplePortal","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Button","Paper","alertify","printSkills","props","JobElement","constructor","state","showComponent","skills_array","job","skills","map","skill","status","onClickAccept","bind","SOP","rating","obj","prompt","evt","value","str1","console","log","replace","count","split","length","message","Sending","id","_id","email","sop","post","then","res","alert","data","window","location","reload","catch","error","setting","ok","cancel","ApplyOptionRejection","sayHello","ApplyOptionFull","ApplyOptionAccept","render","applicants","includes","shortlisted","color","user","accepted","max_app","max_pos","no_of_apps","no_of_raters","title","deadline","name","job_type","salary","duration"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\"\nimport Card from 'react-bootstrap/Card';\nimport axios from 'axios';\nimport { validateFields } from '../../Common/Validation';\n// import PopUpInput from './PopUpInput'\nimport SimplePortal from '../PopUpInput'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport alertify from 'alertifyjs';\nimport 'alertifyjs/build/css/alertify.css';\n\nfunction printSkills(props){\n        return (\n            <div>\n                {props}\n            </div>\n        )\n    }\n\nclass JobElement extends Component {\n    //console.log(props);\n\n    constructor(props) {\n        super(props);\n        this.state = {\n           showComponent: false,\n        };\n        // console.log(\"in JobElement\");\n        this.skills_array= this.props.job.skills.map(skill => {\n            return printSkills(skill)\n            })\n\n            // console.log(props)\n        \n        this.status= '';\n        this.onClickAccept = this.onClickAccept.bind(this);\n        this.SOP='Enter Your SOP'\n        this.rating=''\n    }\n\n    \n\n    // function \n    onClickAccept(){\n        // this.setState({\n        //     showComponent: true\n        // });\n\n        var obj =this.props;\n        alertify.prompt('Enter SOP (less than 250 words )', this.SOP,\n            function(evt, value){ \n            this.SOP=value;\n            var str1=value;\n            console.log(obj)\n            str1 = str1.replace(/(^\\s*)|(\\s*$)/gi,\"\");\n            str1 = str1.replace(/[ ]{2,}/gi,\" \");\n            str1 = str1.replace(/\\n /,\"\\n\");\n            var count=str1.split(' ').length;\n            if(count>250)\n                alertify.message('You have exceeded the word limit, please try applying again');\n            else\n            {\n                \n                console.log(this.SOP);\n                const Sending = {\n                    id: obj.job._id,\n                    email: obj.email,\n                    sop: this.SOP\n                }\n                axios.post(\"http://localhost:4000/job/applyjob\",Sending)\n                    .then(res=>{\n                        alert(res.data);\n                        window.location.reload();\n                    })\n                    .catch(function(error){\n                        console.log(error);\n                    })\n            }\n            }\n           \n        ).setting({\n            'labels': {ok:'Submit', cancel:'Cancel'},\n\n        });\n    }\n\n    ApplyOptionRejection(){\n        // console.log(props)\n        function sayHello() {\n            alert(\"Reached Max Limit of 10 open Applicatons\");\n        }\n        \n        return (\n            <Button color=\"primary\" onClick={sayHello}>Apply</Button>\n        );\n    }\n\n    ApplyOptionFull(){\n        // console.log(props)\n        function sayHello() {\n            alert(\"You have already been accepted into a job!!\");\n        }\n        \n        return (\n            <Button color=\"primary\" onClick={sayHello}>Apply</Button>\n        );\n    }\n        \n\n        ApplyOptionAccept(){\n            // console.log(props)\n            // var ShowComponent = false\n            // function sayHello() {\n            //     console.log(\"hai\");\n            //     ShowComponent=true\n            // }\n            \n            return (\n                <Button color=\"primary\" onClick={this.onClickAccept}>Apply</Button>       \n            );\n        }\n        render(){\n\n            if(this.props.job.applicants.includes(this.props.email) || this.props.job.shortlisted.includes(this.props.email))\n            {   \n                this.status=<label style={{ color: 'green' }}> Applied</label>\n            }\n            else if(this.props.user.accepted===1)\n            {\n                this.status = this.ApplyOptionFull()\n            }\n            else if(this.props.job.max_app===0 || this.props.job.max_pos===0)\n            {\n                this.status=<label style={{ color: 'red' }}>No Vacancies</label>\n            }\n            else if(this.props.user.no_of_apps===10)\n            {\n                \n                this.status = this.ApplyOptionRejection()\n                \n            }\n            else\n            {          \n                this.status = this.ApplyOptionAccept()            \n            }\n\n            if(this.props.job.rating === 0)\n            {\n                this.rating=0;\n            }\n            else\n            {\n                this.rating=this.props.job.rating/this.props.job.no_of_raters\n            }\n            // return(\n            //     <div>\n                    \n            //         <Card style={{ width: '18rem' }}>\n            //         <Card.Body>\n            //             <Card.Title>{this.props.job.title}</Card.Title>\n            //             <Card.Subtitle className=\"mb-2 text-muted\">Deadline: {this.props.job.deadline}</Card.Subtitle>\n            //             Skills Required: {this.skills_array}\n            //             <Card.Text>\n                            \n            //                 Posted by: {this.props.job.name}\n            //                 <br />\n            //                 Type: {this.props.job.job_type}\n            //                 <br />\n            //                 Salary: {this.props.job.salary}\n            //                 <br />\n            //                 Duration: {this.props.job.duration}\n            //                 <br />\n            //                 Rating: {this.props.job.rating}\n            //                 <br />\n            //             </Card.Text> \n            //                 {this.status} \n                              \n            //                 {/* <Card.Link onClick={()=>(console.log(\"hi there\"))}>say hi</Card.Link>\n            //             <Card.Link href=\"#\">Another Link</Card.Link>  */}\n            //             </Card.Body> \n            //             </Card> \n            //     </div>\n\n            // )\n            return(\n                <TableRow key={this.props.job._id}>\n                    <TableCell>{this.props.job.title}</TableCell>\n                    <TableCell align=\"right\">{this.props.job.deadline}</TableCell>\n                    <TableCell align=\"right\">{this.skills_array}</TableCell>\n                    <TableCell align=\"right\">{this.props.job.name}</TableCell>\n                    <TableCell align=\"right\">{this.props.job.job_type}</TableCell>\n                    <TableCell align=\"right\">{this.props.job.salary}</TableCell>\n                    <TableCell align=\"right\">{this.props.job.duration}</TableCell>\n                    <TableCell align=\"right\">{this.rating}</TableCell>\n                    <TableCell align=\"right\">{this.status}</TableCell>\n                    {/* {this.state.showComponent?<SimplePortal /> :\n                                            <div> <TableCell align=\"right\">{this.status}</TableCell>\n                                            <br/></div>\n                                            } */}\n                </TableRow>\n            )\n        }\n    }\n\nexport default JobElement;"]},"metadata":{},"sourceType":"module"}