{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // Short ID Generation in JavaScript\n// http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/\n\n/**\n * The default alphabet is 25 numbers and lowercase letters.\n * Any numbers that look like letters and vice versa are removed:\n * 1 l, 0 o.\n * Also the following letters are not present, to prevent any\n * expletives: cfhistu\n */\n\n\nvar DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz'; // Governs the length of the ID.\n// With an alphabet of 25 chars,\n// a length of 8 gives us 25^8 or\n// 152,587,890,625 possibilities.\n// Should be enough...\n\nvar DEFAULT_ID_LENGTH = 5;\n/**\n * Governs the number of times we should try to find\n * a unique value before giving up.\n * @type {Number}\n */\n\nvar UNIQUE_RETRIES = 9999;\n/**\n * Returns a randomly-generated friendly ID.\n * Note that the friendly ID is not guaranteed to be\n * unique to any other ID generated by this same method,\n * so it is up to you to check for uniqueness.\n * @return {String} friendly ID.\n */\n\nvar generate = exports.generate = function generate(options) {\n  var _options = _extends({}, options),\n      _options$alphabet = _options.alphabet,\n      alphabet = _options$alphabet === undefined ? DEFAULT_ALPHABET : _options$alphabet,\n      _options$idLength = _options.idLength,\n      idLength = _options$idLength === undefined ? DEFAULT_ID_LENGTH : _options$idLength;\n\n  var rtn = '';\n\n  for (var i = 0; i < idLength; i++) {\n    rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n  }\n\n  return rtn;\n};\n/**\n * Tries to generate a unique ID that is not defined in the\n * `previous` array.\n * @param  {Array} previous The list of previous ids to avoid.\n * @return {String} A unique ID, or `null` if one could not be generated.\n */\n\n\nvar generateUnique = exports.generateUnique = function generateUnique(previous) {\n  previous = previous || [];\n  var retries = 0;\n  var id = void 0; // Try to generate a unique ID,\n  // i.e. one that isn't in the previous.\n\n  while (!id && retries < UNIQUE_RETRIES) {\n    id = generate();\n\n    if (previous.indexOf(id) !== -1) {\n      id = null;\n      retries++;\n    }\n  }\n\n  return id;\n};","map":{"version":3,"sources":["/home/kevin/Downloads/ESW/esw-repo/frontend/node_modules/react-liquid-gauge/lib/hashid.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","DEFAULT_ALPHABET","DEFAULT_ID_LENGTH","UNIQUE_RETRIES","generate","options","_options","_options$alphabet","alphabet","undefined","_options$idLength","idLength","rtn","charAt","Math","floor","random","generateUnique","previous","retries","id","indexOf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGJ,MAAM,CAACK,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIV,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ,C,CAEA;AACA;;AAEA;;;;;;;;;AAOA,IAAIS,gBAAgB,GAAG,2BAAvB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB,GAAG,CAAxB;AAEA;;;;;;AAKA,IAAIC,cAAc,GAAG,IAArB;AAEA;;;;;;;;AAOA,IAAIC,QAAQ,GAAGhB,OAAO,CAACgB,QAAR,GAAmB,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AACzD,MAAIC,QAAQ,GAAGhB,QAAQ,CAAC,EAAD,EAAKe,OAAL,CAAvB;AAAA,MACIE,iBAAiB,GAAGD,QAAQ,CAACE,QADjC;AAAA,MAEIA,QAAQ,GAAGD,iBAAiB,KAAKE,SAAtB,GAAkCR,gBAAlC,GAAqDM,iBAFpE;AAAA,MAGIG,iBAAiB,GAAGJ,QAAQ,CAACK,QAHjC;AAAA,MAIIA,QAAQ,GAAGD,iBAAiB,KAAKD,SAAtB,GAAkCP,iBAAlC,GAAsDQ,iBAJrE;;AAMA,MAAIE,GAAG,GAAG,EAAV;;AACA,OAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,QAApB,EAA8BlB,CAAC,EAA/B,EAAmC;AAC/BmB,IAAAA,GAAG,IAAIJ,QAAQ,CAACK,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACb,MAApC,CAAhB,CAAP;AACH;;AACD,SAAOiB,GAAP;AACH,CAZD;AAcA;;;;;;;;AAMA,IAAIK,cAAc,GAAG7B,OAAO,CAAC6B,cAAR,GAAyB,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAC5EA,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,EAAE,GAAG,KAAK,CAAd,CAH4E,CAK5E;AACA;;AACA,SAAO,CAACA,EAAD,IAAOD,OAAO,GAAGhB,cAAxB,EAAwC;AACpCiB,IAAAA,EAAE,GAAGhB,QAAQ,EAAb;;AACA,QAAIc,QAAQ,CAACG,OAAT,CAAiBD,EAAjB,MAAyB,CAAC,CAA9B,EAAiC;AAC7BA,MAAAA,EAAE,GAAG,IAAL;AACAD,MAAAA,OAAO;AACV;AACJ;;AAED,SAAOC,EAAP;AACH,CAhBD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// Short ID Generation in JavaScript\n// http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/\n\n/**\n * The default alphabet is 25 numbers and lowercase letters.\n * Any numbers that look like letters and vice versa are removed:\n * 1 l, 0 o.\n * Also the following letters are not present, to prevent any\n * expletives: cfhistu\n */\nvar DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';\n\n// Governs the length of the ID.\n// With an alphabet of 25 chars,\n// a length of 8 gives us 25^8 or\n// 152,587,890,625 possibilities.\n// Should be enough...\nvar DEFAULT_ID_LENGTH = 5;\n\n/**\n * Governs the number of times we should try to find\n * a unique value before giving up.\n * @type {Number}\n */\nvar UNIQUE_RETRIES = 9999;\n\n/**\n * Returns a randomly-generated friendly ID.\n * Note that the friendly ID is not guaranteed to be\n * unique to any other ID generated by this same method,\n * so it is up to you to check for uniqueness.\n * @return {String} friendly ID.\n */\nvar generate = exports.generate = function generate(options) {\n    var _options = _extends({}, options),\n        _options$alphabet = _options.alphabet,\n        alphabet = _options$alphabet === undefined ? DEFAULT_ALPHABET : _options$alphabet,\n        _options$idLength = _options.idLength,\n        idLength = _options$idLength === undefined ? DEFAULT_ID_LENGTH : _options$idLength;\n\n    var rtn = '';\n    for (var i = 0; i < idLength; i++) {\n        rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n    }\n    return rtn;\n};\n\n/**\n * Tries to generate a unique ID that is not defined in the\n * `previous` array.\n * @param  {Array} previous The list of previous ids to avoid.\n * @return {String} A unique ID, or `null` if one could not be generated.\n */\nvar generateUnique = exports.generateUnique = function generateUnique(previous) {\n    previous = previous || [];\n    var retries = 0;\n    var id = void 0;\n\n    // Try to generate a unique ID,\n    // i.e. one that isn't in the previous.\n    while (!id && retries < UNIQUE_RETRIES) {\n        id = generate();\n        if (previous.indexOf(id) !== -1) {\n            id = null;\n            retries++;\n        }\n    }\n\n    return id;\n};"]},"metadata":{},"sourceType":"script"}